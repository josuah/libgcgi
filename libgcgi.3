.Dd $Mdocdate: August 01 2022 $
.Dt LIBGCGI 3
.Os
.
.
.Sh NAME
.
.Nm gcgi_handle_request ,
.Nm gcgi_fatal ,
.Nm gcgi_template ,
.Nm gcgi_set_var ,
.Nm gcgi_get_var ,
.Nm gcgi_free_var_list ,
.Nm gcgi_read_var_list ,
.Nm gcgi_write_var_list ,
.Nm gcgi_gopher_search ,
.Nm gcgi_gopher_path ,
.Nm gcgi_gopher_query ,
.Nm gcgi_gopher_host ,
.Nm gcgi_gopher_port ,
.Nd REST library for Gopher
.
.
.Sh SYNOPSIS
.
.In libgcgi.h
.
.Ft "void" Fn gcgi_handle_request "struct gcgi_handler h[]" "char **argv" "int argc"
.Ft "void" Fn gcgi_fatal "char *fmt" "..."
.Ft "void" Fn gcgi_template "char const *path" "struct gcgi_var_list *vars"
.Ft "void" Fn gcgi_set_var "struct gcgi_var_list *vars" "char *key" "char *val"
.Ft "char *" Fn gcgi_get_var "struct gcgi_var_list *vars" "char *key"
.Ft "void" Fn gcgi_free_var_list "struct gcgi_var_list *vars"
.Ft "void" Fn gcgi_read_var_list "struct gcgi_var_list *vars" "char *path"
.Ft "int" Fn gcgi_write_var_list "struct gcgi_var_list *vars" "char *path"
.Vt char *gcgi_gopher_search
.Vt char *gcgi_gopher_path
.Vt char *gcgi_gopher_host
.Vt char *gcgi_gopher_port
.Vt struct gcgi_var_list gcgi_gopher_query
.
.
.Sh DESCRIPTION
.
.
.Ss Request Handling
.
The central element of the library is an array of structures,
using appropriate handler depending on the query path.
.Pp
.Bd -literal
struct gcgi_handler {
	char const *glob;
	void (*fn)(char **matches);
};
.Ed
.
.Pp
The
.Vt glob
is a string against which the path (everything in the query before the
.Dq ? )
will be matched against.
.Pp
The
.Vt fn 
function pointer will be called, with an array of matches passed as argument.
There are as many matches populated as there are
.Dq "*"
in
.Vt glob .
.
.Pp
.Bl -tag
.
.It Ft "void" Fn gcgi_handle_request "struct gcgi_handler h[]" "int argc" "char **argv"
Given an array of handlers
.Fa h ,
call the first function pointer that matches.
.Fa argc
and
.Fa argv
should be set to the program ones to extract the arguments given by
.Xr geomyidae 8 .
The
.Fa h
struct is an array of
.Vt struct gcgi_handler :
.
.El
.
.
.Ss Content Generation
.
According to
.Xr geomyidae 8
behavior, the output format will be:
.Bl -bullet -compact -width x
.
.It
a raw gophermap if the binary is
.Dq index.cgi ,
.It
a
.Xr geomyidae 8
.Sq gph
format if the binary is
.Dq index.dcgi .
.El
.
.Pp
.Bl -tag
.
.It Ft "void" Fn gcgi_fatal "char *fmt" "..."
Prints an error message formatted by
.Fa fmt
and
.Xr exit 3
the program with status 1.
.
.It Ft "void" Fn gcgi_template "char const *path" "struct gcgi_var_list *vars"
Format the template at
.Fa path
replacing every occurence of
.Dq {{key}}
by the matching value by searching in
.Fa vars .
.
.It Vt void Fn gcgi_print_gophermap "char type" "char *desc" "char *path" "char *host" "char *port"
Print a gophermap entry line with
.Fa type ,
.Fa desc ,
.Fa path ,
.Fa host ,
.Fa port
to be set to the chosen value as described in RFC 1436.
Both
.Fa host
and
.Fa port
are NULL, default values will be used.

.It Ft void Fn gcgi_print_gph "char type" "char *desc" "char *path" "char *host" "char *port"
Print a gph entry line with
.Fa type ,
.Fa desc ,
.Fa path ,
.Fa host ,
.Fa port
to be set to the chosen value as described in
.Xr geomyidae 8
manual page.
If
.Fa host
or
.Fa port
are NULL, default values will be used.
.
.El
.
.
.Ss Variable List Handling
.
A common data format is used for handling lists of variables:
.Bl -bullet -compact -width x
.It
For parsing a simple text-based database format and writing it back.
.It
For storing the parsed query string in
.Vt gcgi_gopher_query .
.It
For passing variables to expand in the templates.
.El
.
.Pp
.Bl -tag
.
.It Ft "void" Fn gcgi_set_var "struct gcgi_var_list *vars" "char *key" "char *val"
Overwrite with
.Fa val
the value of a variable matching
.Fa key
of
.Fa vars .
The
.Fa key
and
.Fa val
buffers are not duplicated, and must remain valid at all time they need to be
accessible, such as through
.Fn gcgi_get_var .
.
.It Ft "char *" Fn gcgi_get_var "struct gcgi_var_list *vars" "char *key"
Get the value of the variable of
.Fa vars
matching
.Fa key
or NULL if none match.
.
.It Ft "void" Fn gcgi_free_var_list "struct gcgi_var_list *vars"
Free memory used by a list of variable.
This only frees the memory allocated by this library.
.
.It Ft "void" Fn gcgi_read_var_list "struct gcgi_var_list *vars" "char *path"
Store all variables from 
.Fa path
onto variables in
.Fa vars .
The file format is similar to RFC822 messages or HTTP headers:
.Bl -bullet -compact -width x
.It
One line per variable, with a key=value format.
.It
The key is everything at the beginning of the line until the occurence of
.Dq ":" .
.It
The value is everything after
.Dq ": " .
.It
After the list of variables, an empty line declares the body of the message,
which continues until the end and is stored in a
.Dq text
key.
.El
.
.It Ft "int" Fn gcgi_write_var_list "struct gcgi_var_list *vars" "char *path"
Encode the variable list
.Fa vars
into a new file at
.Fa path .
A temporary file will be created in the meantime,
and the replacement will be atomic so that no partial write can occur.
The
.Dq text
special key will be turned into the body of the message after an empty line
instead of a variable on its own line.
.
.El
.
.
.Ss Global Variables
.
These variables are filled with the components of the query.
They will only be valid after
.Fn handle_request
is called.
.
.Pp
.Bl -tag
.
.It Vt char *gcgi_gopher_search
From argv[1], this is the search string, passed after a tab in
the gopher protocol for item type
.Dq 7 .
.
.It Vt char *gcgi_gopher_path
From argv[2], this is the query path.
It is the full query without the search string and with the query string removed.
.
.It Vt struct gcgi_var_list gcgi_gopher_query
From argv[2], this is the query string stored as a key-value
.Vt gcgi_var_list .
It is extracted from the part of the query after the
.Dq ? ,
usually formated as
.Dq ?key1=value1&key2=value2&key3=value3
.
.It Vt char *gcgi_gopher_host
From argv[3], this is the current host name configured in
.Xr geomyidae 8 .
It is what to use as a
.Sq host
in links printed out.
.
.It Vt char *gcgi_gopher_port
From argv[4], this is the current port number configured in
.Xr geomyidae 8 .
It is what to use as a
.Sq port
in links printed out.
.
.El
.
.
.Sh EXAMPLES
.
.
.Bd -literal
#include "libgcgi.h"

/* implementation of each handler here */

static struct gcgi_handler handlers[] = {
	{ "/",		page_home },
	{ "/song",	page_song_list },
	{ "/song/*",	page_song_item },
	{ "*",		page_not_found },
	{ NULL,		NULL },
};

int
main(int argc, char **argv)
{
	/* privilege dropping, chroot and/or syscall restriction here */

        gcgi_handle_request(handlers, argv, argc);
        return 0;
}
.Ed
.
.
.Sh ENVIRONMENT VARIABLES
.
.Nm libgcgi
does not use environment variable, but the application code can make use of them.
The environment variables applied to
.Xr geomyidae 8
will be inherited and accessible.
.
.
.Sh BUGS
.
To debug
.Nm libgcgi ,
it is possible to call it on a command line, which will show all logging and error messages displayed on stderr:
.
.Bd -literal
$ ./index.cgi "" "/song/never-bored-of-adventure?lyrics=1&comments=1" "" ""
.Ed
.
.
.Sh CAVEATS
.
The Gopher protocol is not designed for file upload.
A dedicated file upload protocol such as SFTP or FTP may be used instead.
.
.Pp
The Gopher protocol is not designed for dynamic scripting.
A dedicated remote interface protocol such as SSH or telnet may be used instead.
.
.
.Sh SEE ALSO
.
.Xr geomyidae 8
.
.
.Sh AUTHORS
.
.Bl -ohang -compact
.It
.An Josuah Demangeon Aq Mt me@josuah.net
.It
.Lk "The Bitreich Project" gopher://bitreich.org
.El
